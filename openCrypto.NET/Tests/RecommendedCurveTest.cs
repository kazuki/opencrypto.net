// 
// Copyright (c) 2008, Kazuki Oikawa
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#if TEST
using System;
using openCrypto.EllipticCurve;
using openCrypto.FiniteField;
using NUnit.Framework;

namespace openCrypto.Tests
{
	[TestFixture, Category ("ECC")]
	public class RecommendedCurveTest
	{
		[Test]
		public void Test_secp112r1 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp112r1);
			Test ("DB7C 2ABF62E3 5E668076 BEAD208B",
				"DB7C 2ABF62E3 5E668076 BEAD2088",
				"659E F8BA0439 16EEDE89 11702B22",
				"09487239 995A5EE7 6B55F9C2 F098",
				"A89C E5AF8724 C0A23E0E 0FF77500",
				"DB7C 2ABF62E3 5E7628DF AC6561C5",
				1, domain);
		}

		[Test]
		public void Test_secp112r2 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp112r2);
			Test ("DB7C 2ABF62E3 5E668076 BEAD208B",
				"6127 C24C05F3 8A0AAAF6 5C0EF02C",
				"51DE F1815DB5 ED74FCC3 4C85D709",
				"4BA30AB5 E892B4E1 649DD092 8643",
				"ADCD 46F5882E 3747DEF3 6E956E97",
				"36DF 0AAFD8B8 D7597CA1 0520D04B",
				4, domain);
		}

		[Test]
		public void Test_secp128r1 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp128r1);
			Test ("FFFFFFFD FFFFFFFF FFFFFFFF FFFFFFFF",
				"FFFFFFFD FFFFFFFF FFFFFFFF FFFFFFFC",
				"E87579C1 1079F43D D824993C 2CEE5ED3",
				"161FF752 8B899B2D 0C28607C A52C5B86",
				"CF5AC839 5BAFEB13 C02DA292 DDED7A83",
				"FFFFFFFE 00000000 75A30D1B 9038A115",
				1, domain);
		}

		[Test]
		public void Test_secp128r2 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp128r2);
			Test ("FFFFFFFD FFFFFFFF FFFFFFFF FFFFFFFF",
				"D6031998 D1B3BBFE BF59CC9B BFF9AEE1",
				"5EEEFCA3 80D02919 DC2C6558 BB6D8A5D",
				"7B6AA5D8 5E572983 E6FB32A7 CDEBC140",
				"27B6916A 894D3AEE 7106FE80 5FC34B44",
				"3FFFFFFF 7FFFFFFF BE002472 0613B5A3",
				4, domain);
		}

		[Test]
		public void Test_secp160r1 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp160r1);
			Test ("FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 7FFFFFFF",
				"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 7FFFFFFC",
				"1C97BEFC 54BD7A8B 65ACF89F 81D4D4AD C565FA45",
				"4A96B568 8EF57328 46646989 68C38BB9 13CBFC82",
				"23A62855 3168947D 59DCC912 04235137 7AC5FB32",
				"01 00000000 00000000 0001F4C8 F927AED3 CA752257",
				1, domain);
		}

		[Test]
		public void Test_secp160r2 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp160r2);
			Test ("FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFAC73",
				"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFAC70",
				"B4E134D3 FB59EB8B AB572749 04664D5A F50388BA",
				"52DCB034 293A117E 1F4FF11B 30F7199D 3144CE6D",
				"FEAFFEF2 E331F296 E071FA0D F9982CFE A7D43F2E",
				"01 00000000 00000000 0000351E E786A818 F3A1A16B",
				1, domain);
		}

		[Test]
		public void Test_secp192r1 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp192r1);
			Test ("FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFF FFFFFFFF",
				"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFF FFFFFFFC",
				"64210519 E59C80E7 0FA7E9AB 72243049 FEB8DEEC C146B9B1",
				"188DA80E B03090F6 7CBF20EB 43A18800 F4FF0AFD 82FF1012",
				" 7192B95 FFC8DA78 631011ED 6B24CDD5 73F977A1 1E794811",
				"FFFFFFFF FFFFFFFF FFFFFFFF 99DEF836 146BC9B1 B4D22831",
				1, domain);
		}

		[Test]
		public void Test_secp224r1 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp224r1);
			Test ("FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 00000000 00000000 00000001",
				"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFF FFFFFFFF FFFFFFFE",
				"B4050A85 0C04B3AB F5413256 5044B0B7 D7BFD8BA 270B3943 2355FFB4",
				"B70E0CBD 6BB4BF7F 321390B9 4A03C1D3 56C21122 343280D6 115C1D21",
				"BD376388 B5F723FB 4C22DFE6 CD4375A0 5A074764 44D58199 85007E34",
				"FFFFFFFF FFFFFFFF FFFFFFFF FFFF16A2 E0B8F03E 13DD2945 5C5C2A3D",
				1, domain);
		}

		[Test]
		public void Test_secp256r1 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp256r1);
			Test ("FFFFFFFF 00000001 00000000 00000000 00000000 FFFFFFFF FFFFFFFF FFFFFFFF",
				"FFFFFFFF 00000001 00000000 00000000 00000000 FFFFFFFF FFFFFFFF FFFFFFFC",
				"5AC635D8 AA3A93E7 B3EBBD55 769886BC 651D06B0 CC53B0F6 3BCE3C3E 27D2604B",
				"6B17D1F2 E12C4247 F8BCE6E5 63A440F2 77037D81 2DEB33A0 F4A13945 D898C296",
				"4FE342E2 FE1A7F9B 8EE7EB4A 7C0F9E16 2BCE3357 6B315ECE CBB64068 37BF51F5",
				"FFFFFFFF 00000000 FFFFFFFF FFFFFFFF BCE6FAAD A7179E84 F3B9CAC2 FC632551",
				1, domain);
		}

		[Test]
		public void Test_secp384r1 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp384r1);
			Test ("FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFF 00000000 00000000 FFFFFFFF",
				"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFFFF 00000000 00000000 FFFFFFFC",
				"B3312FA7 E23EE7E4 988E056B E3F82D19 181D9C6E FE814112 0314088F 5013875A C656398D 8A2ED19D 2A85C8ED D3EC2AEF",
				"AA87CA22 BE8B0537 8EB1C71E F320AD74 6E1D3B62 8BA79B98 59F741E0 82542A38 5502F25D BF55296C 3A545E38 72760AB7",
				"3617DE4A 96262C6F 5D9E98BF 9292DC29 F8F41DBD 289A147C E9DA3113 B5F0B8C0 0A60B1CE 1D7E819D 7A431D7C 90EA0E5F",
				"FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF C7634D81 F4372DDF 581A0DB2 48B0A77A ECEC196A CCC52973",
				1, domain);
		}

		[Test]
		public void Test_secp521r1 ()
		{
			ECDomainParameters domain = ECDomains.GetDomainParameter (ECDomainNames.secp521r1);
			Test ("01FF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF",
				"01FF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC",
				"0051 953EB961 8E1C9A1F 929A21A0 B68540EE A2DA725B 99B315F3 B8B48991 8EF109E1 56193951 EC7E937B 1652C0BD 3BB1BF07 3573DF88 3D2C34F1 EF451FD4 6B503F00",
				"00C6858E 06B70404 E9CD9E3E CB662395 B4429C64 8139053F B521F828 AF606B4D 3DBAA14B 5E77EFE7 5928FE1D C127A2FF A8DE3348 B3C1856A 429BF97E 7E31C2E5 BD66",
				"0118 39296A78 9A3BC004 5C8A5FB4 2C7D1BD9 98F54449 579B4468 17AFBD17 273E662C 97EE7299 5EF42640 C550B901 3FAD0761 353C7086 A272C240 88BE9476 9FD16650",
				"01FF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFA 51868783 BF2F966B 7FCC0148 F709A5D0 3BB5C9B8 899C47AE BB6FB71E 91386409",
				1, domain);
		}

		static void Test (string p, string a, string b, string Gx, string Gy, string n, int h, ECDomainParameters domain)
		{
			IFiniteField ff = domain.Group.FiniteField;
			AreEqual (p, domain.P, "p");
			AreEqual (a, ff.ToNormal (domain.A), "a");
			AreEqual (b, ff.ToNormal (domain.B), "b");
			AreEqual (Gx, ff.ToNormal (domain.G.X), "Gx");
			AreEqual (Gy, ff.ToNormal (domain.G.Y), "Gy");
			AreEqual (n, domain.N, "n");
			Assert.AreEqual (h, domain.H, "h");
		}

		static void AreEqual (string expected, Number actual, string msg)
		{
			expected = expected.Replace (" ", "").ToLower ().TrimStart ('0');
			Assert.AreEqual (expected, actual.ToString (16), msg);
		}
	}
}
#endif
